The Apprentice Experience at Little KidogoNote: Am in Week 4 of the Little Kidogo apprenticeship, so I will give a brief of what the other weeks were like and what I learnt. Enrollment was 16th May 2018.On 18th May 2018, the week 1 task hit my inbox. I was super exited and hands on. The assignments shared, entail the topics to cover, reading material and challenges to tackle.Reviews are done weekly, on days that you agree upon with your mentor.What I learnt: * What is a Version Control System.* The difference between both Functional and Object-Oriented Programming* OTP is a collection of useful middleware, libraries, and tools written in the Erlang programming language* How to set-up ElixirThe challenges experienced:* Week 1 is easy breezyWeek 2  The topics that were most interesting on week two was pattern matching and how you have to view it as an assertion (Functional Language) and not an assignment (Object Oriented Programming).  The operators under Elixir were clearly explained.What I learnt:* Pattern matching. o For Instance:o  a =1a^ =1* Introduction to functional programming* Functions:  Week 3This is what I have learnt in week 3 of the apprenticeship:* Functions and Modules – I can use them comfortably in Elixir. Functions and modules are basically the backbone of all algorithms that are required for all programs we design.* The guard clause use the when predicate.o Pattern matching allows Elixir to decide which function to invoke based on the arguments passed. But if we need to distinguish based on their types or on some test involving their values we use the guard clause.o Example: defmodule Number do    def   num1(z) when is_number(z) doIO.puts “#{z} is a number”endend* The pipe operator makes calling and passing parameters to a number of functions just as you imagined it.o For instance:Val |> f(a,b)  is the same as calling fn val(a,b)DB.students 	|> form.class	|> special_dietThis will call the students database first the result becomes the argument passed to class and what is returned is passed to those with a special diet.* Project set-up through mix.* Running tests- it’s important to write the test before writing your code, this helps get the flow of your code.